name: unit_tests
on:
  push:
     branches: [ main, 'rbus-**' ,rbus-codecoverage ]
  pull_request:
     branches: [ main, 'rbus-**', rbus-codecoverage ]
jobs:
  all:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build
            install
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Set up CMake
        # 3.16.x To support flow control commands to be overridden.
        # Installs in: find /opt -ipath *bin/cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'
      - name: Install packages
        run: >
          sudo apt update && sudo apt install -y libcurl4-openssl-dev libgtest-dev lcov gcovr libev-dev valgrind
      - name: Checkout rbus
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          path: rbus
      - name: Configure Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake 
          -S "${{github.workspace}}/rbus"
          -B build/rbus 
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr" 
          -DBUILD_FOR_DESKTOP=ON
          -DENABLE_UNIT_TESTING=ON
          -DENABLE_CODE_COVERAGE=ON          
          -DCMAKE_BUILD_TYPE=Debug
      - name: Build Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus 
      - name: Install rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus install
      - name: Start rtrouted
          nohup to keep it running.
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          nohup ./bin/rtrouted -f -l DEBUG > /tmp/rtrouted_log.txt &
      - name: Run RbusTestTimeoutValues Unit test
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          nohup ./bin/rbusTestTimeoutValuesProvider &
          ./bin/rbusTestTimeoutValuesConsumer
      - name: Run Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          #continue-on-error: true
          valgrind --leak-check=full ./bin/rbusMethodProvider >/tmp/plog.txt & 
          valgrind --leak-check=full ./bin/rbusMethodConsumer -a
          #continue-on-error: true
          ls -lt
          cat /tmp/plog.txt
      - name: Check Valgrind output
        id: valgrind_check
        run: |
             if grep -q "ERROR SUMMARY: 0 errors" /tmp/plog.txt; then
             echo "No memory leaks found"
             echo "status=success" >> $GITHUB_ENV
             else
             echo "Memory leaks detected"
             echo "status=failure" >> $GITHUB_ENV
             fi
      - name: Post comment on failure
        if: env.status == 'failure'
        uses: actions/github-script@v6
        with:
         script: |
             github.rest.issues.createComment({owner: RoseMary_Benny@comcast.com,repo:rbus-codecoverage,issue_number: context.issue.number , body: "valgrind memory leak observed" })


      

      # - name: Run Unit test
      #   run: |
      #     cd install/usr
      #     export PREFIX=$PWD
      #     export LD_LIBRARY_PATH=$PREFIX/lib
      #     nohup ./bin/rbusTestProvider >/tmp/plog.txt &
      #     ./bin/rbusTestConsumer -a
      # - name: Run multiRbusOpenMethod Unit Test
      #   run: |
      #     cd install/usr
      #     export PREFIX=$PWD
      #     export LD_LIBRARY_PATH=$PREFIX/lib
      #     ./bin/multiRbusOpenMethodProvider &
      #     ./bin/multiRbusOpenMethodConsumer &
      - name: Run multiRbusOpenSubscribe Unit test
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          nohup ./bin/multiRbusOpenProvider >/tmp/log_multiRbusOpenProvider.txt &
          ./bin/multiRbusOpenConsumer
      - name: Enable permission to script 
        run: |
          echo $PWD
          ls -lt $PWD
          chmod a+x rbus/test.sh
          echo "ROSE"
          cat rbus/test.sh
      - name: Set Environment variables
        run:  |
         echo "MY_VARIABLE=${{github.workspace}}/install/usr/bin" >$GITHUB_ENV
         ls -lt ${{github.workspace}}/install/usr/bin/
         ls -lt $MY_VARIABLE
      - name: Run shell script
        run:  |
         export LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib 
         ./rbus/test.sh
        env:
          MY_VARIABLE: ${{env.MY_VARIABLE}} 
    #   - name: Run multiRbusOpenGet Unit test
    #     run: |
    #       cd install/usr
    #       export PREFIX=$PWD
    #       export LD_LIBRARY_PATH=$PREFIX/lib
    #       nohup ./bin/multiRbusOpenRbusGetProvider >/tmp/log_multiRbusOpenRbusGetProvider.txt &
    #       ./bin/multiRbusOpenRbusGetConsumer
    #  - name: Run multiRbusOpenSet Unit test
    #    run: |
    #      cd install/usr
    #      export PREFIX=$PWD
    #      export LD_LIBRARY_PATH=$PREFIX/lib
    #       nohup ./bin/multiRbusOpenRbusGetProvider >/tmp/log_multiRbusOpenRbusSetProvider.txt &
    #       ./bin/multiRbusOpenRbusSetConsumer
    #   - name: Run Gtest Cases
    #    run: |
    #      cd build/rbus
    #      nohup ./src/session_manager/rbus_session_mgr &
    #       ./unittests/rbus_gtest.bin
    #   - name: Stop SessionManager
    #    run: |
    #      killall -9 rbus_session_mgr
      - name: Build Tests
        run: |
          # add build script execution here
      - name: Run Tests with Valgrind
        run: |
            cd install/usr
            export PREFIX=$PWD
            export LD_LIBRARY_PATH=$PREFIX/lib
            mkdir -p /tmp/valgrind_report
            valgrind --leak-check=full --log-file="/tmp/valgrind_report/provider_valgrind_report.txt" --xml=yes --xml-file=/tmp/valgrind_report/provider_valgrind_procinfo.xml ./bin/rbusTestTimeoutValuesProvider &
            valgrind --leak-check=full --log-file="/tmp/valgrind_report/consumer_valgrind_report.txt" --xml=yes --xml-file=/tmp/valgrind_report/consumer_valgrind_procinfo.xml ./bin/rbusTestTimeoutValuesConsumer &

      - name: Stop rtrouted
        run: |
          killall -9 rtrouted

      - name: Upload the coverage report to Pull request using actions
        uses: actions/upload-artifact@v4
        with:
          name: valgrind-xml-files
          path: /tmp/valgrind_report
      - name: Run Memory check
        run: |
            cd ${{github.workspace}}/rbus
            chmod a+x check-memory.sh
            cat check-memory.sh
            cp  /tmp/valgrind_report/provider_valgrind_procinfo.xml ${{github.workspace}}/rbus/
            ls -lt ${{github.workspace}}/rbus/provider_valgrind_procinfo.xml
            ./check-memory.sh
            cat commit_message.txt
            #cp ${{github.workspace}}/rbus/commit_message.txt ${{github.workspace}}/.github/workflows/commit_message.txt
     # - name: Post Memory Check Result to PR
       # uses: actions/github-script@v6
        #with:
         #github-token: ${{ secrets.GITHUB_TOKEN }}
         #script: |
          # const fs = require('fs');
           #const leakMessage = fs.readFileSync('${{github.workspace}}/rbus/commit_message.txt', 'utf8');
            # github.rest.issues.createComment({
             #issue_number: context.payload.pull_request.number,
             #owner: context.repo.owner,
             #repo: context.repo.repo,
             #body: `ðŸš¨ **Memory Leak Check Result**:\n\n${leakMessage}`
           #});




      
      
     
