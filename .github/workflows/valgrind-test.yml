name: unit_tests_valgrind
on:
  push:
     branches: [ main, 'rbus-**' ,rbus-codecoverage ]
  pull_request:
     branches: [ main, 'rbus-**', rbus-codecoverage ]
     types: [opened,synchronize]
jobs:
  all:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build
            install
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Set up CMake
        # 3.16.x To support flow control commands to be overridden.
        # Installs in: find /opt -ipath *bin/cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'
      - name: Install packages
        run: >
          sudo apt update && sudo apt install -y libcurl4-openssl-dev libgtest-dev lcov gcovr libev-dev valgrind libxml2-utils
      - name: Checkout rbus
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          path: rbus
      - name: Configure Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake 
          -S "${{github.workspace}}/rbus"
          -B build/rbus 
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr" 
          -DBUILD_FOR_DESKTOP=ON
          -DENABLE_UNIT_TESTING=ON
          -DENABLE_CODE_COVERAGE=ON          
          -DCMAKE_BUILD_TYPE=Debug
      - name: Build Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus 
      - name: Install rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus install
      - name: Start rtrouted
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --error-exitcode=1  ./bin/rtrouted -f -l DEBUG > /tmp/rtrouted_log.txt &
      - name: TRIAL SCRIPT
        run: |
             echo creaing trial script
             cat << 'EOF' >mem1.sh
             #!/bin/sh
             LOG_DIR="/tmp"
             echo "Processing log files in directory: $LOG_DIR"

             # Initialize the table
             SUMMARY_FILE="github_step_summary.md"
             echo "###### Errors found in log files" > $SUMMARY_FILE
             echo "| Heap Error              | Error      | Leak Summary       |" >> $SUMMARY_FILE
             echo "|------------- -----------|------------|--------------------|" >> $SUMMARY_FILE

             # Variable to track if any memory-related issues are found
             MEMORY_ISSUE_FOUND=false
             # Function to extract and format information from a log file
             process_log_file() {
             local LOG_FILE=$1
             if [ -f $LOG_FILE ]; then
             echo "Log file $LOG_FILE exists and is readable."
              # Parse the Valgrind XML output
               API_ERRORS=$(xmllint --xpath '//error' $LOG_FILE | grep -oP '(?<=<what>).*?(?=</what>)' | sort | uniq -c)
               HEAP_ERRORS=$(grep -A 5 "HEAP SUMMARY:" $LOG_FILE)
               LEAK_SUMMARY=$(grep -A 5 "LEAK SUMMARY:" $LOG_FILE)
               ERROR_SUMMARY=$(grep -A 1 "ERROR SUMMARY:" $LOG_FILE)

             # Check if there are any memory-related issues
              if [ -n "$LEAK_SUMMARY" ] || [ -n "$HEAP_ERRORS" ] || [ -n "$ERROR_SUMMARY" ]; then
              MEMORY_ISSUE_FOUND=true
              # Format the extracted information into the table
              echo "$API_ERRORS" | while read -r line; do
                COUNT=$(echo $line | awk '{print $1}')
                API_NAME=$(echo $line | awk '{print substr($0, index($0,$2))}')
                HEAP_ERROR=$(echo "$HEAP_ERRORS" | grep "$API_NAME")
                ERROR=$(echo "$ERROR_SUMMARY" | grep "$API_NAME")
                LEAK=$(echo "$LEAK_SUMMARY" | grep "$API_NAME")
                
                echo "| $API_NAME | $COUNT | $HEAP_ERROR | $ERROR | $LEAK |" >> $SUMMARY_FILE
              done
              fi
              else
              echo "Log file $LOG_FILE does not exist"
              fi
             }
             for LOG_FILE in $LOG_DIR/*.txt; do
               process_log_file $LOG_FILE
             done
             # Check if any memory-related issues were found and append the summary
             if [ "$MEMORY_ISSUE_FOUND" = true ]; then
             cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
             else
             echo "No memory-related issues detected in any log files."
             fi
             EOF
             chmod a+x mem1.sh


      - name: Setup script
        run: |
            echo "creating check memory log script"
            cat << 'EOF' >memoryleak.sh
            #!/bin/sh
            BINARY_PATH=$1
            LOG_FILE=$2
            echo "Running binary : \$BINARY_PATH"
            echo "Running log file: \$LOG_FILE"
            if [ -f $LOG_FILE ]; then
            echo "Log file exists and is readable."
            echo "######Errors found in binary $BINARY_PATH" >>$GITHUB_STEP_SUMMARY
            #EXTRACT THE RELEVANT INFO
            LEAK_SUMMARY=$(grep -A 5 "LEAK SUMMARY:" $LOG_FILE)
            ERROR_SUMMARY=$(grep -A 1 "ERROR SUMMARY:" $LOG_FILE)
            HEAP_SUMMARY=$(grep -A 5 "HEAP SUMMARY:" $LOG_FILE)
              if [ -n "$LEAK_SUMMARY" ];then
              echo "### LEAK Summary" >>$GITHUB_STEP_SUMMARY
              echo "$LEAK_SUMMARY"  >>$GITHUB_STEP_SUMMARY
              fi
              if [ -n "$ERROR_SUMMARY" ];then
              echo "### ERROR Summary" >>$GITHUB_STEP_SUMMARY
              echo "$ERROR_SUMMARY"  >>$GITHUB_STEP_SUMMARY
              fi
              if [ -n "$HEAP_SUMMARY" ]; then
              echo "HEAP SUMMARY" >>$GITHUB_STEP_SUMMARY
              echo "$HEAP_SUMMARY" >>$GITHUB_STEP_SUMMARY
              fi
            #cat $LOG_FILE >>$GITHUB_STEP_SUMMARY
            else
            echo "Log file does not exist"
            fi
            EOF
            chmod a+x memoryleak.sh
      
      - name: Run Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/plog.txt ./bin/rbusMethodProvider & 
          valgrind --leak-check=full ./bin/rbusMethodConsumer -a
          ls -lt
          cat /tmp/plog.txt
      - name: Excute the summmary
        run: |
            ./mem1.sh /tmp
      - name: Check Valgrind output
        id: valgrind_check
        run: |
             if grep -q "ERROR SUMMARY: 0 errors" /tmp/plog.txt; then
             echo "No memory leaks found"
             echo "status=success" >> $GITHUB_ENV
             else
             echo "Memory leaks detected"
             echo "status=failure" >> $GITHUB_ENV
             cat /tmp/plog.txt
             #cat /tmp/plog.txt >>$GITHUB_STEP_SUMMARY
             ./memoryleak.sh "./bin/rbusMethodConsumer" "/tmp/plog.txt"
             fi

      - name: Stop SessionManager
        run: |
          #killall -9 rbus_session_mgr
      - name: Stop rtrouted
        run: |
          killall -9 rtrouted

  
