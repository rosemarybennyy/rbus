
name: unit_tests_valgrind
on:
  push:
     branches: [ main, 'rbus-**' ,rbus-codecoverage ]
  pull_request:
     branches: [ main, 'rbus-**', rbus-codecoverage ]
     types: [opened,synchronize]
  #workflow_run:
   #workflows: ["unit_test"]
   #types:
    #    -completed
jobs:
  all:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build
            install
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Set up CMake
        # 3.16.x To support flow control commands to be overridden.
        # Installs in: find /opt -ipath *bin/cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'
      - name: Install packages
        run: >
          sudo apt update && sudo apt install -y libcurl4-openssl-dev libgtest-dev lcov gcovr libev-dev valgrind libxml2-utils
      - name: Checkout rbus
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          path: rbus
      - name: Configure Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake 
          -S "${{github.workspace}}/rbus"
          -B build/rbus 
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr" 
          -DBUILD_FOR_DESKTOP=ON
          -DENABLE_UNIT_TESTING=ON
          -DENABLE_CODE_COVERAGE=ON          
          -DCMAKE_BUILD_TYPE=Debug
      - name: Build Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus 
      - name: Install rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus install
      - name: Start rtrouted
        run: |
          mkdir -p /tmp/valgrind
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --error-exitcode=1  ./bin/rtrouted -f -l DEBUG > /tmp/rtrouted_log.txt &
      - name: Setup script
        run: |
            echo "creating check memory log script"
            cat << 'EOF' >memoryleak.sh
            #!/bin/sh
            
            LOG_FOLDER="/tmp"
            SUMMARY_FILE=$GITHUB_STEP_SUMMARY  
            LEAKS_FOUND=false
            for LOG_FILE in $LOG_FOLDER/*.log; do
             #cat $LOG_FILE 
             if ( grep -q "ERROR SUMMARY" $LOG_FILE  && ! grep -q "ERROR SUMMARY: 0 errors" $LOG_FILE ); then
             LEAKS_FOUND=true
             echo "leak found set to  $LEAK_FOUND"
             echo "Running logfile : $LOG_FILE" >>$SUMMARY_FILE
             BINARY_PATH=$(basename $LOG_FILE .log)
             echo "Running bin : $BINARY_PATH" >>$SUMMARY_FILE
             #EXTRACT THE RELEVANT INFO
             LEAK_SUMMARY=$(grep -A 5 "LEAK SUMMARY:" $LOG_FILE)
             ERROR_SUMMARY=$(grep -A 1 "ERROR SUMMARY:" $LOG_FILE)
             HEAP_SUMMARY=$(grep -A 5 "HEAP SUMMARY:" $LOG_FILE)
              if [ -n "$LEAK_SUMMARY" ];then
              echo " LEAK Summary" >>$SUMMARY_FILE
              echo "$LEAK_SUMMARY"  >>$SUMMARY_FILE
              fi
              if [ -n "$ERROR_SUMMARY" ];then
              echo "ERROR Summary" >>$SUMMARY_FILE
              echo "$ERROR_SUMMARY"  >>$SUMMARY_FILE
              fi
              if [ -n "$HEAP_SUMMARY" ]; then
              echo "HEAP SUMMARY" >>$SUMMARY_FILE
              echo "$HEAP_SUMMARY" >>$SUMMARY_FILE
              fi
              #cat $LOG_FILE >>$SUMMARY_FILE
             echo "*************************" >>$SUMMARY_FILE
             else
              echo "No memory leaks found $LOG_FILE"
             fi
            done
            echo "leak found set to  $LEAKS_FOUND outside for"
            if [ "$LEAKS_FOUND" = true ]; then
              echo "inside leak found"
              echo "status=failure" >> $GITHUB_ENV
              cat $GITHUB_ENV
            else
              echo "status=success" >>$GITHUB_ENV
              echo "No leaks found, Ready for PR">>$SUMMARY_FILE
              cat $GITHUB_ENV
            fi
            EOF
            chmod a+x memoryleak.sh
            ls -lt
            #cat $GITHUB_ENV
      - name: Run RbusTestTimeoutValues Unit test with valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/rbusTestTimeoutValuesProvider.log ./bin/rbusTestTimeoutValuesProvider & 
          valgrind --leak-check=full  --log-file=/tmp/rbusTestTimeoutValuesConsumer.log ./bin/rbusTestTimeoutValuesConsumer & 

      - name: Run rbusTest Unit test with valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/rbusTestProvider.log ./bin/rbusTestProvider & 
          valgrind --leak-check=full  --log-file=/tmp/rbusTestConsumer.log ./bin/rbusTestConsumer -a    
            
      - name: Run test with rbusmethod provider
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/rbusMethodProvider.log ./bin/rbusMethodProvider & 
          valgrind --leak-check=full  --log-file=/tmp/rbusMethodConsumer.log ./bin/rbusMethodConsumer -a 
    
      - name: Run multiRbusOpenGet Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/multiRbusGetProvider.log ./bin/multiRbusOpenRbusGetProvider  & 
          valgrind --leak-check=full --log-file=/tmp/multiRbusGetConsumer.log ./bin/multiRbusOpenRbusGetConsumer &
      - name: Run multiRbusOpenSet Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/multiRbusOpenRbusGetProvider.log ./bin/multiRbusOpenRbusGetProvider  &
          valgrind --leak-check=full --log-file=/tmp/multiRbusOpenRbusSetConsumer.log ./bin/multiRbusOpenRbusSetConsumer &
      #- name: Run Gtest Cases with Valgrind
        #run: |
          #cd install/usr
          #export PREFIX=$PWD
          #export LD_LIBRARY_PATH=$PREFIX/lib
          #valgrind --leak-check=full --log-file=/tmp/rbus_session_manager.log ./bin/rbus_session_manager &
          #valgrind --leak-check=full --log-file=/tmp/rbus_gtest.log --track-origins=yes --verbose ./bin/rbus_gtest.bin 
          #cat /tmp/rbus_gtest.log
      #- name: Stop SessionManager
        #run: |
          #killall -9 rbus_session_mgr
      - name: Run script.sh
        run: |
             ./memoryleak.sh
      - name: Valgrind verification
        run: |
              source $GITHUB_ENV
              cat $GITHUB_ENV
              if [[ "$status" == "failure" ]]; then
              echo "Leaks found"
              exit 1
              else
              echo "No leaks found"
              fi
      


           
