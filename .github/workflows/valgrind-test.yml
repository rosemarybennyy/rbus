name: unit_tests_valgrind
on:
  push:
     branches: [ main, 'rbus-**' ,rbus-codecoverage ]
  pull_request:
     branches: [ main, 'rbus-**', rbus-codecoverage ]
     types: [opened,synchronize]
jobs:
  all:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build
            install
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Set up CMake
        # 3.16.x To support flow control commands to be overridden.
        # Installs in: find /opt -ipath *bin/cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'
      - name: Install packages
        run: >
          sudo apt update && sudo apt install -y libcurl4-openssl-dev libgtest-dev lcov gcovr libev-dev valgrind libxml2-utils
      - name: Checkout rbus
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          path: rbus
      - name: Configure Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake 
          -S "${{github.workspace}}/rbus"
          -B build/rbus 
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr" 
          -DBUILD_FOR_DESKTOP=ON
          -DENABLE_UNIT_TESTING=ON
          -DENABLE_CODE_COVERAGE=ON          
          -DCMAKE_BUILD_TYPE=Debug
      - name: Build Rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus 
      - name: Install rbus
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          make -C build/rbus install
      - name: Start rtrouted
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --error-exitcode=1  ./bin/rtrouted -f -l DEBUG > /tmp/rtrouted_log.txt &
      - name: Setup script
        run: |
            echo "creating check memory log script"
            cat << 'EOF' >memoryleak.sh
            #!/bin/sh
            
            LOG_FOLDER="/tmp"
            SUMMARY_FILE=$GITHUB_STEP_SUMMARY

            #echo "| File | LEAK Summary | ERROR Summary | HEAP Summary |" > $SUMMARY_FILE
            #echo "| --- | --- | --- | --- |" >> $SUMMARY_FILE
            
            for LOG_FILE in $LOG_FOLDER/*.log; do
             echo "Running logfile : $LOG_FILE"
             BINARY_PATH=$(basename $LOG_FILE .log)
             echo "Running bin : $BINARY_PATH"


              if [ -f $LOG_FILE ]; then
               echo "log file readable"
               LEAK_SUMMARY=$(awk '/LEAK SUMMARY:/, /^$/' $LOG_FILE | awk '{print $0 "<br>"}' | tr '\n' ' ')
               ERROR_SUMMARY=$(awk '/ERROR SUMMARY:/, /^$/' $LOG_FILE | awk '{print $0 "<br>"}' | tr '\n' ' ')
               HEAP_SUMMARY=$(awk '/HEAP SUMMARY:/, /^$/' $LOG_FILE | awk '{print $0 "<br>"}' | tr '\n' ' ')
               #LEAK_SUMMARY=$(grep -A 5 "LEAK SUMMARY:" $LOG_FILE | awk '{print $0 "<br>"}' )
               #echo $LEAK_SUMMARY
               #ERROR_SUMMARY=$(grep -A 1 "ERROR SUMMARY:" $LOG_FILE | sed 's/$/<br>/')
               #echo $ERROR_SUMMARY
               #HEAP_SUMMARY=$(grep -A 5 "HEAP SUMMARY:" $LOG_FILE | sed 's/$/<br>/')

               LEAK_SUMMARY=${LEAK_SUMMARY:-"No leaks found"}
               ERROR_SUMMARY=${ERROR_SUMMARY:-"No errors found"}
               HEAP_SUMMARY=${HEAP_SUMMARY:-"No heap summary found"}
               if [ "$LEAK_SUMMARY" != "No leaks found" ]; then
                echo "| $BINARY_PATHÂ  | $LEAK_SUMMARY | $ERROR_SUMMARY | $HEAP_SUMMARY |" >> $SUMMARY_FILE
               fi
            else
               echo "logfile not exist"
             fi
            done
            EOF
            chmod a+x memoryleak.sh
      - name: Run test with rbusmethod provider
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/rbusMethodProvider.log ./bin/rbusMethodProvider & 
          valgrind --leak-check=full  --log-file=/tmp/rbusMethodConsumert.log ./bin/rbusMethodConsumer -a 
      - name: Run Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/rbusTestProvider.log ./bin/rbusTestProvider  &
          valgrind --leak-check=full --log-file=/tmp/rbusTestConsume.log ./bin/rbusTestConsumer -a
      - name: Run multiRbusOpenMethod Unit Test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/multiRbusOpenMethodProvider.log ./bin/multiRbusOpenMethodProvider &
          valgrind --leak-check=full --log-file=/tmp/multiRbusOpenMethodConsumer.log ./bin/multiRbusOpenMethodConsumer &
      - name: Run multiRbusOpenSubscribe Unit test with Valgrind
        run: |
          cd install/usr
          export PREFIX=$PWD
          export LD_LIBRARY_PATH=$PREFIX/lib
          valgrind --leak-check=full --log-file=/tmp/multiRbusOpenProvider.log ./bin/multiRbusOpenProvider  &
          #valgrind --leak-check=full --log-file=/tmp/multiRbusOpenConsumer.log ./bin/multiRbusOpenConsumer
      #- name: Run multiRbusOpenGet Unit test with Valgrind
        #run: |
          #cd install/usr
          #export PREFIX=$PWD
          #export LD_LIBRARY_PATH=$PREFIX/lib
          #valgrind --leak-check=full --log-file=/tmp/multiRbusGetProvider.log ./bin/multiRbusOpenRbusGetProvider  &
          #valgrind --leak-check=full --log-file=/tmp/multiRbusGetConsumer.log ./bin/multiRbusOpenRbusGetConsumer
      #- name: Run multiRbusOpenSet Unit test with Valgrind
        #run: |
          #cd install/usr
          #export PREFIX=$PWD
          #export LD_LIBRARY_PATH=$PREFIX/lib
          #valgrind --leak-check=full --log-file=/tmp/multiRbusOpenRbusGetProvider.log ./bin/multiRbusOpenRbusGetProvider  &
          #valgrind --leak-check=full --log-file=/tmp/multiRbusOpenRbusSetConsumer.log ./bin/multiRbusOpenRbusSetConsumer
      - name: Run Gtest Cases with Valgrind
        run: |
          cd build/rbus
          valgrind --leak-check=full --log-file=/tmp/rbus_session_manager.log ./src/session_manager/rbus_session_mgr &
          valgrind --leak-check=full --log-file=/tmp/rbus_gtest.log ./unittests/rbus_gtest.bin
      - name: Stop SessionManager
        run: |
          killall -9 rbus_session_mgr
      - name: Run script.sh
        run: |
             ./memoryleak.sh
           
